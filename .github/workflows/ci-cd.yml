name: CI/CD

on:
  push:
    paths-ignore:
      - '*.md'
      - LICENSE.txt
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release? Set to true'
        required: true

env:
  QUAY_USERNAME: venafi_oss
  PYPI_USERNAME: fullstaq-venafi-gitlab-integration

jobs:
  test_and_build:
    name: Test & build
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: venv
          key: test-venv-v2-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}

      - name: Create virtual environment
        run: python3 -m venv venv
      - name: Upgrade pip
        run: ./venv/bin/pip install -U 'pip>=22.3,<23'
      - name: Install requirements
        run: ./venv/bin/pip install -r requirements.txt -r requirements-dev.txt

      - name: Flake8
        run: ./venv/bin/flake8 *.py venafi_vcert_gitlab_integration

      - name: Check whether version number needs bumping
        run: |
          TAGS=$(git tag)
          VERSION=$(cat venafi_vcert_gitlab_integration/version.txt)
          export TAGS
          export VERSION
          python -c "$SCRIPT"
        env:
          SCRIPT: |
            import os
            if os.getenv('VERSION') in os.getenv('TAGS').splitlines():
              print("ERROR: please bump venafi_vcert_gitlab_integration/version.txt")
              exit(1)
            else:
              print("All is fine")


      - name: Build source distribution
        run: python3 setup.py sdist

      - name: Upload source distribution artifact
        uses: actions/upload-artifact@v2
        with:
          name: source-distribution
          path: dist/*.tar.gz


      - name: Login to Quay.io
        run: docker login -u "${QUAY_USERNAME}" --password-stdin quay.io <<<"${QUAY_PASSWORD}"
        env:
          QUAY_PASSWORD: ${{ secrets.QUAY_DOCKER_PASSWORD }}

      - name: Build image
        run: >
          docker build
          --pull
          --cache-from "quay.io/venafi-gitlab-integration/cache_tlsprotect-vcert:x86_64"
          --build-arg BUILDKIT_INLINE_CACHE=1
          -t image
          .
        env:
          DOCKER_BUILDKIT: '1'

      - name: Upload image artifact
        run: |
          IMAGE_NAME="quay.io/venafi-gitlab-integration/ci-artifact_tlsprotect-vcert:cirun${{ github.run_number }}-x86_64"
          docker tag image "$IMAGE_NAME"
          docker push "$IMAGE_NAME"

      - name: Update image cache
        run: |
          IMAGE_NAME="quay.io/venafi-gitlab-integration/cache_tlsprotect-vcert:x86_64"
          docker tag image "$IMAGE_NAME"
          docker push "$IMAGE_NAME"


  publish_image:
    name: Publish image
    runs-on: ubuntu-20.04
    needs: test_and_build
    steps:
      - uses: actions/checkout@v2

      - name: Read product version
        run: |
          PRODUCT_FULL_VERSION=$(cat venafi_vcert_gitlab_integration/version.txt)
          awk '{ split($0, a, "."); print "PRODUCT_MAJOR_VERSION=" a[1] }' <<< "$PRODUCT_FULL_VERSION" >> "$GITHUB_ENV"
          awk '{ split($0, a, "."); print "PRODUCT_MAJOR_MINOR_VERSION=" a[1] "." a[2] }' <<< "$PRODUCT_FULL_VERSION" >> "$GITHUB_ENV"
          echo "PRODUCT_FULL_VERSION=${PRODUCT_FULL_VERSION}" >> "$GITHUB_ENV"

      - name: Login to Quay.io
        run: docker login -u "${QUAY_USERNAME}" --password-stdin quay.io <<<"${QUAY_PASSWORD}"
        env:
          QUAY_PASSWORD: ${{ secrets.QUAY_DOCKER_PASSWORD }}


      - name: Download image artifact
        run: docker pull "quay.io/venafi-gitlab-integration/ci-artifact_tlsprotect-vcert:cirun${{ github.run_number }}-x86_64"

      - name: Determine image tag names
        run: |
          echo ARTIFACT_IMAGE_NAME="quay.io/venafi-gitlab-integration/ci-artifact_tlsprotect-vcert:cirun${{ github.run_number }}-x86_64" >> "$GITHUB_ENV"
          echo MAJOR_VERSIONED_IMAGE_NAME="quay.io/venafi-gitlab-integration/tlsprotect-vcert:${PRODUCT_MAJOR_VERSION}-x86_64" >> "$GITHUB_ENV"
          echo MAJOR_MINOR_VERSIONED_IMAGE_NAME="quay.io/venafi-gitlab-integration/tlsprotect-vcert:${PRODUCT_MAJOR_MINOR_VERSION}-x86_64" >> "$GITHUB_ENV"
          echo FULL_VERSIONED_IMAGE_NAME="quay.io/venafi-gitlab-integration/tlsprotect-vcert:${PRODUCT_FULL_VERSION}-x86_64" >> "$GITHUB_ENV"
          echo LATEST_WITH_ARCH_IMAGE_NAME="quay.io/venafi-gitlab-integration/tlsprotect-vcert:latest-x86_64" >> "$GITHUB_ENV"
          echo LATEST_IMAGE_NAME="quay.io/venafi-gitlab-integration/tlsprotect-vcert:latest" >> "$GITHUB_ENV"

      - name: Set image tags
        run: |
          set -x
          docker tag "$ARTIFACT_IMAGE_NAME" "$MAJOR_VERSIONED_IMAGE_NAME"
          docker tag "$ARTIFACT_IMAGE_NAME" "$MAJOR_MINOR_VERSIONED_IMAGE_NAME"
          docker tag "$ARTIFACT_IMAGE_NAME" "$FULL_VERSIONED_IMAGE_NAME"
          docker tag "$ARTIFACT_IMAGE_NAME" "$LATEST_WITH_ARCH_IMAGE_NAME"
          docker tag "$ARTIFACT_IMAGE_NAME" "$LATEST_IMAGE_NAME"

      - name: Publish image and tags
        run: |
          set -x
          docker push "$MAJOR_VERSIONED_IMAGE_NAME"
          docker push "$MAJOR_MINOR_VERSIONED_IMAGE_NAME"
          docker push "$FULL_VERSIONED_IMAGE_NAME"
          docker push "$LATEST_WITH_ARCH_IMAGE_NAME"
          docker push "$LATEST_IMAGE_NAME"
        if: github.event.inputs.create_release == 'true'


  publish_pypi:
    name: Publish PyPI
    runs-on: ubuntu-20.04
    needs: test_and_build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: venv
          key: publish-venv-${{ hashFiles('requirements-publish.txt') }}
      - name: Create virtual environment
        run: python3 -m venv venv
      - name: Install requirements
        run: ./venv/bin/pip install -r requirements-publish.txt
      - name: Download source distribution
        uses: actions/download-artifact@v2
        with:
          name: source-distribution
          path: dist
      - name: Twine upload
        run: ./venv/bin/twine upload --non-interactive dist/*
        if: github.event.inputs.create_release == 'true'
        env:
          TWINE_USERNAME: ${{ env.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}


  create_release:
    name: Create release
    runs-on: ubuntu-20.04
    needs: test_and_build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags
      - name: Read product version
        run: |
          VERSION=$(cat venafi_vcert_gitlab_integration/version.txt)
          echo "PRODUCT_VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Determine changelog
        run: |
          MERGE_BASE=$(git merge-base origin/main HEAD)
          echo "Merge base: $MERGE_BASE"

          if PREVIOUS_RELEASE_TAG=$(git describe "$MERGE_BASE" --tags --abbrev=0 --match='v*' 2>/dev/null); then
            echo "Previous release: $PREVIOUS_RELEASE_TAG"
            git log --pretty='format:%s' "$PREVIOUS_RELEASE_TAG..HEAD" | sed -E 's|(.*)| * \1|' > changelog.txt
          else
            echo "No previous release found"
            git log --pretty='format:%s' | sed -E 's|(.*)| * \1|' > changelog.txt
          fi

          echo
          echo "## Changelog"
          cat changelog.txt

      - name: Create tag
        run: |
          set -x
          git tag "v${PRODUCT_VERSION}"
          git push origin "v${PRODUCT_VERSION}"
        if: github.event.inputs.create_release == 'true'

      - name: Create draft release
        run: gh release create "v${PRODUCT_VERSION}" --draft --notes-file changelog.txt --title "Version $PRODUCT_VERSION"
        if: github.event.inputs.create_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
